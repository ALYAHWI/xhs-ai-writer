import { getGenerationPrompt } from '@/lib/prompts';
import { ERROR_MESSAGES, HTTP_STATUS } from '@/lib/constants';
import { aiManager } from '@/lib/ai-manager';
import { filterSensitiveContent, detectSensitiveWords } from '@/lib/sensitive-words';

// AI‰∫§‰∫íÁé∞Âú®ÈÄöËøáaiManagerÁªü‰∏ÄÁÆ°ÁêÜ

export async function POST(request: Request) {
  try {
    const { keyword, user_info, hot_post_rules } = await request.json();

    if (!user_info || !keyword) {
      return new Response(ERROR_MESSAGES.MISSING_REQUIRED_PARAMS, { status: HTTP_STATUS.BAD_REQUEST });
    }

    // ‰ΩøÁî®Ê®°ÂùóÂåñÁöÑÁîüÊàêÊèêÁ§∫ËØç
    const generatePrompt = getGenerationPrompt(
      hot_post_rules ? JSON.stringify(hot_post_rules, null, 2) : 'ËØ∑ÂèÇËÄÉÂ∞èÁ∫¢‰π¶ÁÉ≠Èó®ÂÜÖÂÆπÁöÑ‰∏ÄËà¨ËßÑÂæã',
      user_info,
      keyword
    );

    // ÂàõÂª∫ÊµÅÂºèÂìçÂ∫î
    const encoder = new TextEncoder();
    const stream = new ReadableStream({
      async start(controller) {
        // ÂÜÖÂÆπÊ∏ÖÊ¥óÊ†áÂøó‰Ωç
        let contentStarted = false;
        const startMarker = "## 1. ÁàÜÊ¨æÊ†áÈ¢òÂàõ‰Ωú";
        let accumulatedContent = ""; // Á¥ØÁßØÂÜÖÂÆπÔºåÁî®‰∫éÊ£ÄÊµãÂºÄÂßãÊ†áËÆ∞

        // ‰ΩøÁî®AIÁÆ°ÁêÜÂô®ÁöÑÊµÅÂºèÁîüÊàêÔºàÂ∏¶ÈáçËØïÊú∫Âà∂Ôºâ
        await aiManager.generateStreamWithRetry(
          generatePrompt,
          // onChunk: Â§ÑÁêÜÊØè‰∏™ÂÜÖÂÆπÂùó
          (content: string) => {
            // Á¥ØÁßØÂÜÖÂÆπÁî®‰∫éÊ£ÄÊµã
            accumulatedContent += content;

            let chunkToSend = content;

            // Â¶ÇÊûúÂÜÖÂÆπÂ∞öÊú™ÂºÄÂßãÔºåÊ£ÄÊü•ÂΩìÂâçÁ¥ØÁßØÂÜÖÂÆπÊòØÂê¶ÂåÖÂê´ÂºÄÂßãÊ†áËÆ∞
            if (!contentStarted) {
              const startIndex = accumulatedContent.indexOf(startMarker);
              if (startIndex !== -1) {
                // ÊâæÂà∞‰∫ÜÂºÄÂßãÊ†áËÆ∞ÔºåËØ¥ÊòéÊ≠£ÂºèÂÜÖÂÆπÂºÄÂßã‰∫Ü
                contentStarted = true;
                // ËÆ°ÁÆóÂú®ÂΩìÂâçchunk‰∏≠ÁöÑÁõ∏ÂØπ‰ΩçÁΩÆ
                const chunkStartIndex = startIndex - (accumulatedContent.length - content.length);
                if (chunkStartIndex >= 0) {
                  // ÂºÄÂßãÊ†áËÆ∞Âú®ÂΩìÂâçchunk‰∏≠ÔºåÂè™ÂèëÈÄÅ‰ªéÊ†áËÆ∞ÂºÄÂßãÁöÑÈÉ®ÂàÜ
                  chunkToSend = content.substring(chunkStartIndex);
                } else {
                  // ÂºÄÂßãÊ†áËÆ∞Âú®‰πãÂâçÁöÑchunk‰∏≠ÔºåÂèëÈÄÅÂÆåÊï¥ÁöÑÂΩìÂâçchunk
                  chunkToSend = content;
                }

                console.log('üéØ Ê£ÄÊµãÂà∞ÂÜÖÂÆπÂºÄÂßãÊ†áËÆ∞ÔºåÂºÄÂßãÂèëÈÄÅÂÜÖÂÆπ');
              } else {
                // Ê≤°ÊâæÂà∞ÂºÄÂßãÊ†áËÆ∞Ôºå‰∏îÂÜÖÂÆπÊú™ÂºÄÂßãÔºåÂøΩÁï•Ëøô‰∏™Âùó
                console.log('‚è≠Ô∏è Ë∑≥ËøáÂâçÁΩÆÂÜÖÂÆπ:', content.substring(0, 50) + '...');
                return;
              }
            }

            // ÊïèÊÑüËØçËøáÊª§Â§ÑÁêÜ
            if (contentStarted && chunkToSend) {
              // Ê£ÄÊµãÊïèÊÑüËØç
              const detection = detectSensitiveWords(chunkToSend);
              if (detection.hasSensitiveWords) {
                console.warn('üö® Ê£ÄÊµãÂà∞ÊïèÊÑüËØç:', detection.detectedWords);
                // ËøáÊª§ÊïèÊÑüËØç
                chunkToSend = filterSensitiveContent(chunkToSend, 'replace');
                console.log('‚úÖ ÊïèÊÑüËØçÂ∑≤Â§ÑÁêÜ');
              }

              // ÂèëÈÄÅÂ§ÑÁêÜÂêéÁöÑÂÜÖÂÆπ
              controller.enqueue(encoder.encode(`data: ${JSON.stringify({ content: chunkToSend })}\n\n`));
            }
          },
          // onError: Â§ÑÁêÜÈîôËØØ
          (error: Error) => {
            console.error('Stream error:', error);
            controller.enqueue(encoder.encode(`data: ${JSON.stringify({ error: error.message })}\n\n`));
            controller.close();
          }
        );

        // ÁîüÊàêÂÆåÊàê
        controller.enqueue(encoder.encode('data: [DONE]\n\n'));
        controller.close();
      }
    });

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST',
        'Access-Control-Allow-Headers': 'Content-Type',
      },
    });

  } catch (error) {
    console.error('Error in generate-stream:', error);
    return new Response(ERROR_MESSAGES.SERVER_ERROR, { status: HTTP_STATUS.INTERNAL_SERVER_ERROR });
  }
}
